@charset 'UTF-8';
//____________________________
// 変数系, mixin, メディはクエリの格納ファイル
// mixinは無許可に追加厳禁 *必要な場合はディレクターに相談
//____________________________
// ---------- プライマリーカラー ----------
$primary: #ff0000;
// ---------- 白、黒、グレー系 ----------
$black_000: #000000;
$black_333: #333333;
$white_fff: #ffffff;
$white_fcf: #fcfcfc;
$lightgray_F7F: #f7f7f7;
$gray_dbd: #dbdbdb;
$lightgray_ddd: #dddddd;
// ---------- その他 ----------
$green_4ab: #4abdac;
$navy_0C0: #0c0033;
$navy_000: #00072b;
$pink_ea4: #ea4c89;
$lihtgray_c9c: #c9cfda;
$green_7fc: #7fc008;
// ---------- メディアクエリ ----------
$msp: 'only screen and (max-width:374px)';
$sp: 'only screen and (max-width:480px)';
$tab: 'only screen and (max-width:768px)';
$pc: 'only screen and (max-width:1280px)';
// ---------- インナー ----------
$inner_padding: 2rem;
$sp_inner: calc(37.5rem + #{$inner_padding * 2});
$inner: 1356px;
$one_margin: calc(calc(100vw - #{$inner}) / 2);
// ---------- フレックス ----------
@mixin flex {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
}

// ---------- 背景画像 ----------
@mixin bgi {
	background-repeat: no-repeat;
	background-position: center;
	background-size: cover;
}

// ---------- フォント（追記変更可能） ----------
@mixin noto_sans {
	font-family: 'Noto Sans JP', sans-serif;
}

// ---------- 縁取り ----------
@mixin textShadow($color, $size: 2px) {
	text-shadow: $color $size 0,
	$color calc(#{$size} / 2 * -1) 0,
	$color 0 calc(#{$size} / 2 * -1),
	$color 0 $size,
	$color $size $size,
	$color calc(#{$size} / 2 * -1) $size,
	$color $size calc(#{$size} / 2 * -1),
	$color calc(#{$size} / 2 * -1) calc(#{$size} / 2 * -1),
	$color calc(#{$size / 2}) $size,
	$color calc(#{$size} / 2 * -1) $size,
	$color calc(#{$size / 2}) calc(#{$size} / 2 * -1),
	$color calc(#{$size} / 2 * -1) calc(#{$size} / 2 * -1),
	$color $size calc(#{$size / 2}),
	$color calc(#{$size} / 2 * -1) calc(#{$size / 2}),
	$color $size calc(#{$size} / 2 * -1),
	$color calc(#{$size} / 2 * -1) calc(#{$size} / 2 * -1);
}

/** --------------------------------
* 引数で指定した色の明るさに応じて白か黒を出力する関数
*
* @param $color カラーコード
*/

@function set_color($color) {
	@if (lightness($color) > 50) {
		@return $black_000;
	}

	@else {
		@return $white_fff;
	}
}

/** --------------------------------
* cssの値を単位を除いて数字だけにしてくれる関数
*
* @param 数字と単位を含む値 10ox, 3remなど
*/

@function stripUnit($number) {
	@if type-of($number)=='number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

/** --------------------------------
* 値の「単位」を取得する関数
*
* @param $value 数字と単位を含む値 10ox, 3remなど
*/

@function getUnit($value) {
	@return str-slice($value * 0 + '', 2, -1);
}

/** --------------------------------
* pxやremをvwに変換してくれる関数
*
* @param $viewport pcデザインの横幅
* @param $fontSize フォントサイズ(pxでもremでも)
*/

@function vw($fontSize, $base-vw: 1280px) {
	$unit: getUnit($fontSize);
	@if $unit==px {
		@return (stripUnit($fontSize) * 100vw) / stripUnit($base-vw);
	}
	@else if $unit==rem {
		@return (stripUnit($fontSize) * 1000vw) / stripUnit($base-vw);
	}
}

/** --------------------------------
* フォントサイズをレスポンシブで調整する関数
*
* @param $pc pcのフォントサイズ
* @param $sp spのフォントサイズ
*/

@function responsiveValue($pc, $sp) {
	@return clamp(#{$sp}, vw($pc), #{$pc});
}


/** --------------------------------
* 画像の縦横比を指定する関数  figureタグに付与
*
* @param $height 横幅100の時の縦の割合 *「%」で指定
*/

@mixin img_aspect_ratio($height) {
	position: relative;
	width: 100%;

	&::before {
		display: block;
		padding-top: $height;
		content: '';
	}

	& > * {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 100%;
		margin: auto;
		object-fit: cover;
	}
}
